#!/bin/bash
# _example.env - update for your scanner & rename to '.env'

# this file is sourced by the 'scan' script
# its provided as an example, modify and rename for your needs

### general
# select the script to be executed when the scan button is pressed
## scanimage - the classic scanning image, use this for testing and keep it if it meets your needs
## scanservjs - execute a scan via a user friendly web front-end and easily access scans from a browser - see scanservjs file for more info
export SCAN_SCRIPT="scanservjs"

# add other buttons or sensors here as required - you'll need to use a similar template to the scan script

### scanservjs

# scanservjs instance - usually only HOST needs to be changed
export SSJS_PROTOCOL="http" # https untested (unsupported?) currently
export SSJS_HOST="scanservjs" # or IP address
export SSJS_PORT=8080
export SSJS_PATH="scan"

# device id as seen by scanservjs - visit the scanserv UI to get this value
export DEVICE_ID="genesys:libusb:001:006" # insert if you know it and are sure it will never change, otherwise dynamically populated
export SANE_HOST="scanner" # the address of the SANE-shared network scanne, IP also fine

# parameters
# see scanservjs docs/repo for an exhaustive list of enumerations
export SSJS_RESOLUTION=300 # 50-600 DPI
export SSJS_MODE="Gray" # Color|Gray|Lineart etc
export SSJS_SOURCE="Flatbed" 
export SSJS_BRIGHTNESS=0
export SSJS_CONTRAST=0
export SSJS_FILTERS=() # ("filter.auto-level" "filter.blur" "filter.threshold") - bash array will be converted to JSON, use spaces not commas!
export SSJS_PIPELINE="PDF (TIF | @:pipeline.lzw-compressed)" # see github link above, custom pipelines also possible - see scanservjs docs for details.
export SSJS_BATCH="none" # none|manual|auto
